class PlaywrightJavascriptPrompts():
    def __init__(self):
        self.template_script_generate = """
               Generate a playwright javascript test spec file for the following scenario:
               Generate the script {test_class}.spec.js.
               Ensure:
               1. Should import the playwright dependencies like test and expect.
               2. Import the required page classes from page files and data files from fixture.
               3. Import the required util functions from support.
               4. STRICTLY have only one test block with a proper title with playwright test arguments and test options and include all the steps inside.
               5. Lines are commented other than the code and Empty lines.
               6. Comment in the top of the file with content 'Generated by Azure OpenAI'.
               7. Include comments of Functions.
               8. Use Base url from config file.
               9. Strictly Validate the responses: After each action, add playwright assertion step and promises for validations wherever needed to ensure that the action was successful.
                      For example, Use playwright expect method to verify if the button is visible or if the text on the webpage is equal to the expected result.
               10. Do not create class.       
               I am giving you an example code in javascript of a test script. Create the script similar to the given sample code below:
               Sample script to follow: {sample_method_to_follow}
               And here are the page classes. Use these below page classes to construct the testscript using the functions of these classes. It is the form (page name: code)
               Page class code: {page_class_code}
        """

        self.template_page_class = """
                Generate a page object class for playwright framework in javascript for the following scenario:
                Class name: {page_class}Page
                Package name: pages
                Fields: {field_details}
                Functions: Different Functions to interact with each WebElement object.
                For each function declaration, there should be valid import package reference or Function definition.
                A user wants to navigate to a specific website, interact with various elements on the.
                webpage, and validate the responses. The file should include the following steps:
                1.Interact with the webpage: Depending on the actions you want to perform, use the appropriate playwright functions.
                    For example, use click to click on a button, etc. Make sure to use the correct CSS selectors or XPaths to identify the elements.
                4.Validate the responses: After each action, add a validation step to ensure that the action was successful.
                    For example, after clicking on a button, you can check if the URL has changed or if a new element has appeared on the webpage.
                5.Handle errors: Enclose the action statements with a try-catch block and catch the exception. Inside the catch block, log the failure.
                6.Lines are commented other than the code and Empty lines.
                7.Comment in the top of the file with content 'Generated by Azure OpenAI'.
                8.Include comments of Class and functions.
        """
